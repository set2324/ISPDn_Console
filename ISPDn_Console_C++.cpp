#include <iostream>

#include <windows.h>

#include <string>

using namespace std;
int
// Переменная для определения количества субъктов ПДн
number = 4,
	// Переменная для определения категории ПДн собственных работников или нет
	workers = 4,
	// Переменная для ввода категории ПДн
	category = 4,
	// Переменная для определения типа актуальных угроз
	threats = 4;
// Переменная для ввода значений 
std::string input;
// Процедура для вывода сообщения о первом уровне защищенности ПДн
void first() {
	cout << (" \n");
	cout << ("Hеобходимо обеспечить 1-й уровень защищенности персональных данных. \n");
	cout << ("  \n");
	system("pause");
}
// Процедура для вывода сообщения о втором уровне защищенности ПДн
void second() {
	cout << (" \n");
	cout << ("Hеобходимо обеспечить 2-й уровень защищенности персональных данных. \n");
	cout << ("  \n");
	system("pause");
}
// Процедура для вывода сообщения о третьем уровне защищенности ПДн
void third() {
	cout << (" \n");
	cout << ("Hеобходимо обеспечить 3-й уровень защищенности персональных данных. \n");
	cout << ("  \n");
	system("pause");
}
// Процедура для вывода сообщения о четвертом уровне защищенности ПДн
void fourth() {
	cout << (" \n");
	cout << ("Hеобходимо обеспечить 3-й уровень защищенности персональных данных. \n");
	cout << ("  \n");
	system("pause");
}
// Процедура для сбора информации о количестве суъектов ПДн
// Выводит сообщение и читает соответствующую переменную
void quantity() {
	// Очищаем строку input
	input.clear();
	cout << (" \n");
	cout << ("Количество субъектов ПДн, обрабатываемых в ИСПДн, более 100000? \n");
	cout << ("0- Нет; \n");
	cout << ("1- Да; \n");
	cin >> input;
}
// Процедура для сбора информации о принадлежности ПДн
// Собственные работники или нет
// Выводит сообщение и читает соответствующую переменную
void employees() {
	// Очищаем строку input
	input.clear();
	cout << (" \n");
	cout << ("В ИСПДн обрабатываются ПДн собственных работников? \n");
	cout << ("0- Нет; \n");
	cout << ("1- Да. \n");
	cin >> input;
}
// Процедура для сбора информации о типе актуальных угроз для ПДн
// Выводит сообщение и читает соответствующую переменную
void type_threats() {
	// Очищаем строку input
	input.clear();
	cout << (" \n");
	cout << ("Введите тип актуальных угроз. \n");
	cout << ("1- Актуальны угрозы 1-го типа. \n");
	cout << ("2- Актуальны угрозы 2-го типа. \n");
	cout << ("3- Актуальны угрозы 3-го типа. \n");
	cout << (" \n");
	cout << ("9- Помощь. \n");
	cin >> input;
}
// Процедура для вывода сообщения об ошибке ввода
void syntax_error() {
	cout << (" \n");
	cout << ("Ошибка ввода \n");
	cout << ("");
}
// Процедура вывода сообщения - помощи о типах актуальных угроз
void help_threads() {
	cout << ("");
	cout << ("Угрозы 1-го типа актуальны для информационной системы, если для нее в том числе актуальны угрозы, связанные с наличием недокументированных (недекларированных) возможностей в системном программном обеспечении, используемом в информационной системе. \n");
	cout << ("");
	cout << ("Угрозы 2-го типа актуальны для информационной системы, если для нее в том числе актуальны угрозы, связанные с наличием недокументированных (недекларированных) возможностей в прикладном программном обеспечении, используемом в информационной системе. \n");
	cout << ("");
	cout << ("Угрозы 3-го типа актуальны для информационной системы, если для нее актуальны угрозы, не связанные с наличием недокументированных (недекларированных) возможностей в системном и прикладном программном обеспечении, используемом в информационной системе. \n");
	cout << ("");
}
int main() {
	// Переводим консоль в русскую раскладку
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	// Переменная счетчика
	char check = 0;
	cout << ("Программа определяет необходимый уровень защищенности персональных данных (ПДн) при их обработке в информационных системах персональных данных (ИСПДн). \n");
	cout << ("  \n");
	cout << ("Уровень защищенности присвается в соответствии с Постановленим Правительства РФ от 1 ноября 2012 г. N 1119 'Об утверждении требований к защите персональных данных при их обработке в информационных системах персональных данных'. \n");
	do {
		// Выводим информацию о выборе категории ПДн
		cout << (" \n");
		cout << ("Выберите категорию ПДн, обрабатываемую в ИСПДн: \n");
		cout << ("1- Специальные; \n");
		cout << ("2- Биометрические; \n");
		cout << ("3- Иные; \n");
		cout << ("4- Общедоступные \n");
		cout << (" \n");
		cout << ("9- Помощь. \n");
		cin >> input;
		// Оператор обработки исключений
		try {
			// Функция преобразует строку, введенную пользователем, в число.
			category = std::stoi(input);
			switch(category) {
				// Ветка выбора 1 - Специальные категории ПДн
				case 1:
					// Ввели корректное значение категории ПДн;
					// Увеличиваем значение счетчика на 1 (check=1)
					check++;
					// Входим во второй цикл, если ввели верное значение
					// о собственных работниках, то запрос о вводе повторяется заново
					do {
						// Вызываем процедуру для чтения переменной:
						// Собственные ли работники или нет?
						employees();
						// Оператор обработки исключений
						try {
							// Функция преобразует строку, введенную пользователем, в число.
							workers = std::stoi(input);
							switch(workers) {
								// Ветка выбора 0 - обрабатываемые Пдн не собственных сотрудников
								case 0:
									// Ввели корректное значение о работниках (собственные или нет)
									// Увеличиваем значение счетчика на 1 (check=2)
									check++;
									// Входим в третий цикл, если ввели верное значение
									do {
										// Вызываем процедуру чтения переменной о количестве субъектов ПДн:
										// Количество суъектов более 100 000?
										quantity();
										// Оператор обработки исключений
										try {
											// Функция преобразует строку, введенную пользователем, в число.
											number = std::stoi(input);
											switch(number) {
												// Ветка выбора 0 - Нет (количество суъектов менее 100 000)
												case 0:
													// Ввели корректное значение о количестве субъектов
													// Увеличиваем значение счетчика на 1 (check=3)
													check++;
													// Входим в четвертый цикл, если ввели верное значение
													do {
														// Вызываем процедуру чтения переменной о типе актуальных угроз
														type_threats();
														// Оператор обработки исключений
														try {
															// Функция преобразует строку, введенную пользователем, в число.
															threats = std::stoi(input);
															switch(threats) {
																// Ветка выбора 1 - актуальны угрозы 1-го типа
																case 1:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	// Вызываем процедуру 1-го уровня защищенности ПДн
																	first();
																	break;
																	// Ветка выбора 2 - актуальны угрозы 2-го типа
																case 2:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	//Вызываем процедуру 2-го уровня защищенности ПДн
																	second();
																	break;
																	// Ветка выбора 3 - актуальны угрозы 3-го типа
																case 3:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	// Вызываем процедуру 3-го уровня защищенности ПДн
																	third();
																	break;
																	// Ветка выбора 9 - Помощь
																	// Выводим информацию о типах актуальных угроз
																case 9:
																	help_threads();
																	break;
																	// Если ввели неверное значение типа актуальных угроз,
																	// то выводится сообщение об ошибке, путем вызова соответствующей процедуры
																default:
																	syntax_error();
															}
															// Обработка исключений, если пользователь ввел не число.	
															// Функция перевода строки в число завершится с ошибкой.
														} catch (const std::invalid_argument) {
															std::cerr << "Ошибка ввода." << std::endl;
														}
														// Если значение счетчика < 4, то выходим из четвертого цикла,
														// Иначе повторно спрашиваем тиа актуальных угроз ПДн
													} while(check < 4);
													break;
													// Ветка выбора 1 - Да (количество суъектов более 100 000)
												case 1:
													// Ввели корректное значение о количестве субъектов
													// Увеличиваем значение счетчика на 1 (check=3)
													check++;
													do {
														type_threats();
														// Оператор обработки исключений
														try {
															// Функция преобразует строку, введенную пользователем, в число.
															threats = std::stoi(input);
															switch(threats) {
																// Ветка выбора 1 - актуальны угрозы 1-го типа
																case 1:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	// Вызываем процедуру 1-го уровня защищенности ПДн
																	first();
																	break;
																	// Ветка выбора 2 - актуальны угрозы 2-го типа
																case 2:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	first();
																	break;
																	// Ветка выбора 3 - актуальны угрозы 3-го типа
																case 3:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	// Вызываем процедуру 2-го уровня защищенности ПДн
																	second();
																	break;
																	// Ветка выбора 9 - Помощь
																case 9:
																	// Выводим информацию о типах актуальных угроз
																	help_threads();
																	break;
																default:
																	syntax_error();
															}
															// Обработка исключений, если пользователь ввел не число.	
															// Функция перевода строки в число завершится с ошибкой.
														} catch (const std::invalid_argument) {
															std::cerr << "Ошибка ввода." << std::endl;
														}
														// Если значение счетчика < 4, то выходим из четвертого цикла,
														// Иначе повторно спрашиваем тип актуальных угроз ПДн
													} while(check < 4);
													break;
													// Если ввели неверное значение о количестве субъектом (более или менее 100 000),
													// то выводится сообщение об ошибке, путем вызова соответствующей процедуры
												default:
													syntax_error();
											}
											// Обработка исключений, если пользователь ввел не число.	
											// Функция перевода строки в число завершится с ошибкой.
										} catch (const std::invalid_argument) {
											std::cerr << "Ошибка ввода." << std::endl;
										}
										// Если значение счетчика < 3, то выходим из третьего цикла,
										// иначе повторно спрашиваем о количестве суъектов ПДн
									} while(check < 3);
									break;
									// Ветка выбора 1 - обрабатываемые ПДн собственных сотрудников
								case 1:
									// Ввели корректное значение о работниках (собственные или нет)
									// Увеличиваем значение счетчика на 1 (check=2)
									check++;
									// Входим в третий цикл, если ввели верное значение
									do {
										// Вызываем процедуру чтения переменной о типе актуальных угроз
										type_threats();
										// Оператор обработки исключений
										try {
											// Функция преобразует строку, введенную пользователем, в число.
											threats = std::stoi(input);
											switch(threats) {
												// Ветка выбора 1 - актуальны угрозы 1-го типа
												case 1:
													// Ввели корректное значение о типе актуальных угроз
													// Увеличиваем значение счетчика на 1 (check=3)
													check++;
													// Вызываем процедуру 1-го уровня защищенности ПДн
													first();
													break;
													// Ветка выбора 2 - актуальны угрозы 2-го типа
												case 2:
													// Ввели корректное значение о типе актуальных угроз
													// Увеличиваем значение счетчика на 1 (check=3)
													check++;
													// Вызываем процедуру 2-го уровня защищенности ПДн
													second();
													break;
													// Ветка выбора 3 - актуальны угрозы 3-го типа
												case 3:
													// Ввели корректное значение о типе актуальных угроз
													// Увеличиваем значение счетчика на 1 (check=3)
													check++;
													// Вызываем процедуру 3-го уровня защищенности ПДн
													third();
													break;
													// Ветка выбора 9 - Помощь
													// Выводим информацию о типах актуальных угроз
												case 9:
													help_threads();
													break;
													// Если ввели неверное значение типа актуальных угроз,
													// то выводится сообщение об ошибке, путем вызова соответствующей процедуры
												default:
													syntax_error();
											}
											// Обработка исключений, если пользователь ввел не число.	
											// Функция перевода строки в число завершится с ошибкой.
										} catch (const std::invalid_argument) {
											std::cerr << "Ошибка ввода." << std::endl;
										}
										// Если значение счетчика < 3, то выходим из третьего цикла,
										// иначе повторно спрашиваем о типе актуальных угроз
									} while(check < 3);
									break;
									// Если ввели неверное значение на вопрос об обрабатываемых ПДн (собственные сотрудники или нет),
									// то выводится сообщение об ошибке, путем вызова соответствующей процедуры
								default:
									syntax_error();
							}
							// Обработка исключений, если пользователь ввел не число.	
							// Функция перевода строки в число завершится с ошибкой.
						} catch (const std::invalid_argument) {
							std::cerr << "Ошибка ввода." << std::endl;
						}
						// Если значение счетчика < 2, то выходим из второго цикла,
						// иначе повторно спрашиваем об обрабатываемых ПДн (собственные сотрудники или нет)
					} while(check < 2);
					break;
					// Ветка выбора - Биометрические ПДн ПДн
				case 2:
					// Ввели корректное значение категории ПДн
					// Увеличиваем значение счетчика на 1 (check=1)
					check++;
					// Входим во второй цикл, если ввели верное значение
					do {
						type_threats();
						// Оператор обработки исключений
						try {
							// Функция преобразует строку, введенную пользователем, в число.
							threats = std::stoi(input);
							switch(threats) {
								// Ветка выбора 1 - актуальны угрозы 1-го типа
								case 1:
									// Ввели корректное значение о типе актуальных угроз
									// Увеличиваем значение счетчика на 1 (check=2)
									check++;
									// Вызываем процедуру 1-го уровня защищенности ПДн
									first();
									break;
									// Ветка выбора 2 - актуальны угрозы 2-го типа
								case 2:
									// Ввели корректное значение о типе актуальных угроз
									// Увеличиваем значение счетчика на 1 (check=2)
									check++;
									second();
									break;
									// Ветка выбора 3 - актуальны угрозы 3-го типа
								case 3:
									// Ввели корректное значение о типе актуальных угроз
									// Увеличиваем значение счетчика на 1 (check=2)
									check++;
									// Вызываем процедуру 3-го уровня защищенности ПДн
									third();
									break;
									// Ветка выбора 9 - Помощь
									// Выводим информацию о типах актуальных угроз
								case 9:
									help_threads();
									break;
									// Если ввели неверное значение типа актуальных угроз,
									// то выводится сообщение об ошибке, путем вызова соответствующей процедуры
								default:
									syntax_error();
							}
							// Обработка исключений, если пользователь ввел не число.	
							// Функция перевода строки в число завершится с ошибкой.
						} catch (const std::invalid_argument) {
							std::cerr << "Ошибка ввода." << std::endl;
						}
						// Если значение счетчика < 2, то выходим из второго цикла,
						// Иначе повторно спрашиваем тип актуальных угроз ПДн
					} while(check < 2);
					break;
					// Ветка выбора 3 - Иные категории ПДн
				case 3:
					// Ввели корректное значение категории ПДн;
					// Увеличиваем значение счетчика на 1 (check=1)
					check++;
					// Входим во второй цикл, если ввели верное значение
					// о собственных работниках, то запрос о вводе повторяется заново
					do {
						// Вызываем процедуру для чтения переменной:
						// Собственные ли работники или нет?
						employees();
						// Оператор обработки исключений
						try {
							// Функция преобразует строку, введенную пользователем, в число.
							workers = std::stoi(input);
							switch(workers) {
								// Ветка выбора 0 - обрабатываемые Пдн не собственных сотрудников
								case 0:
									// Ввели корректное значение о работниках (собственные или нет)
									// Увеличиваем значение счетчика на 1 (check=2)
									check++;
									// Входим в третий цикл, если ввели верное значение
									do {
										// Вызываем процедуру чтения переменной о количестве субъектов ПДн:
										// Количество суъектов более 100 000?
										quantity();
										// Оператор обработки исключений
										try {
											// Функция преобразует строку, введенную пользователем, в число.
											number = std::stoi(input);
											switch(number) {
												// Ветка выбора 0 - Нет (количество суъектов менее 100 000)
												case 0:
													// Ввели корректное значение о количестве субъектов
													// Увеличиваем значение счетчика на 1 (check=3)
													check++;
													// Входим в четвертый цикл, если ввели верное значение
													do {
														// Вызываем процедуру чтения переменной о типе актуальных угроз
														type_threats();
														// Оператор обработки исключений
														try {
															// Функция преобразует строку, введенную пользователем, в число.
															threats = std::stoi(input);
															switch(threats) {
																// Ветка выбора 1 - актуальны угрозы 1-го типа
																case 1:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	// Вызываем процедуру 1-го уровня защищенности ПДн
																	second();
																	break;
																	// Ветка выбора 2 - актуальны угрозы 2-го типа
																case 2:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	//Вызываем процедуру 2-го уровня защищенности ПДн
																	third();
																	break;
																	// Ветка выбора 3 - актуальны угрозы 3-го типа
																case 3:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	// Вызываем процедуру 3-го уровня защищенности ПДн
																	fourth();
																	break;
																	// Ветка выбора 9 - Помощь
																	// Выводим информацию о типах актуальных угроз
																case 9:
																	help_threads();
																	break;
																	// Если ввели неверное значение типа актуальных угроз,
																	// то выводится сообщение об ошибке, путем вызова соответствующей процедуры
																default:
																	syntax_error();
															}
															// Обработка исключений, если пользователь ввел не число.	
															// Функция перевода строки в число завершится с ошибкой.
														} catch (const std::invalid_argument) {
															std::cerr << "Ошибка ввода." << std::endl;
														}
														// Если значение счетчика < 4, то выходим из четвертого цикла,
														// Иначе повторно спрашиваем тиа актуальных угроз ПДн
													} while(check < 4);
													break;
													// Ветка выбора 1 - Да (количество суъектов более 100 000)
												case 1:
													// Ввели корректное значение о количестве субъектов
													// Увеличиваем значение счетчика на 1 (check=3)
													check++;
													do {
														type_threats();
														// Оператор обработки исключений
														try {
															// Функция преобразует строку, введенную пользователем, в число.
															threats = std::stoi(input);
															switch(threats) {
																// Ветка выбора 1 - актуальны угрозы 1-го типа
																case 1:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	// Вызываем процедуру 1-го уровня защищенности ПДн
																	first();
																	break;
																	// Ветка выбора 2 - актуальны угрозы 2-го типа
																case 2:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	second();
																	break;
																	// Ветка выбора 3 - актуальны угрозы 3-го типа
																case 3:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	// Вызываем процедуру 2-го уровня защищенности ПДн
																	fourth();
																	break;
																	// Ветка выбора 9 - Помощь
																case 9:
																	// Выводим информацию о типах актуальных угроз
																	help_threads();
																	break;
																default:
																	syntax_error();
															}
															// Обработка исключений, если пользователь ввел не число.	
															// Функция перевода строки в число завершится с ошибкой.
														} catch (const std::invalid_argument) {
															std::cerr << "Ошибка ввода." << std::endl;
														}
														// Если значение счетчика < 4, то выходим из четвертого цикла,
														// Иначе повторно спрашиваем тип актуальных угроз ПДн
													} while(check < 4);
													break;
													// Если ввели неверное значение о количестве субъектом (более или менее 100 000),
													// то выводится сообщение об ошибке, путем вызова соответствующей процедуры
												default:
													syntax_error();
											}
											// Обработка исключений, если пользователь ввел не число.	
											// Функция перевода строки в число завершится с ошибкой.
										} catch (const std::invalid_argument) {
											std::cerr << "Ошибка ввода." << std::endl;
										}
										// Если значение счетчика < 3, то выходим из третьего цикла,
										// иначе повторно спрашиваем о количестве суъектов ПДн
									} while(check < 3);
									break;
									// Ветка выбора 1 - обрабатываемые ПДн собственных сотрудников
								case 1:
									// Ввели корректное значение о работниках (собственные или нет)
									// Увеличиваем значение счетчика на 1 (check=2)
									check++;
									// Входим в третий цикл, если ввели верное значение
									do {
										// Вызываем процедуру чтения переменной о типе актуальных угроз
										type_threats();
										// Оператор обработки исключений
										try {
											// Функция преобразует строку, введенную пользователем, в число.
											threats = std::stoi(input);
											switch(threats) {
												// Ветка выбора 1 - актуальны угрозы 1-го типа
												case 1:
													// Ввели корректное значение о типе актуальных угроз
													// Увеличиваем значение счетчика на 1 (check=3)
													check++;
													// Вызываем процедуру 1-го уровня защищенности ПДн
													second();
													break;
													// Ветка выбора 2 - актуальны угрозы 2-го типа
												case 2:
													// Ввели корректное значение о типе актуальных угроз
													// Увеличиваем значение счетчика на 1 (check=3)
													check++;
													// Вызываем процедуру 2-го уровня защищенности ПДн
													third();
													break;
													// Ветка выбора 3 - актуальны угрозы 3-го типа
												case 3:
													// Ввели корректное значение о типе актуальных угроз
													// Увеличиваем значение счетчика на 1 (check=3)
													check++;
													// Вызываем процедуру 3-го уровня защищенности ПДн
													fourth();
													break;
													// Ветка выбора 9 - Помощь
													// Выводим информацию о типах актуальных угроз
												case 9:
													help_threads();
													break;
													// Если ввели неверное значение типа актуальных угроз,
													// то выводится сообщение об ошибке, путем вызова соответствующей процедуры
												default:
													syntax_error();
											}
											// Обработка исключений, если пользователь ввел не число.	
											// Функция перевода строки в число завершится с ошибкой.
										} catch (const std::invalid_argument) {
											std::cerr << "Ошибка ввода." << std::endl;
										}
										// Если значение счетчика < 3, то выходим из третьего цикла,
										// иначе повторно спрашиваем о типе актуальных угроз
									} while(check < 3);
									break;
									// Если ввели неверное значение на вопрос об обрабатываемых ПДн (собственные сотрудники или нет),
									// то выводится сообщение об ошибке, путем вызова соответствующей процедуры
								default:
									syntax_error();
							}
							// Обработка исключений, если пользователь ввел не число.	
							// Функция перевода строки в число завершится с ошибкой.
						} catch (const std::invalid_argument) {
							std::cerr << "Ошибка ввода." << std::endl;
						}
						// Если значение счетчика < 2, то выходим из второго цикла,
						// иначе повторно спрашиваем об обрабатываемых ПДн (собственные сотрудники или нет)
					} while(check < 2);
					break;
					// Ветка выбора 4 - Общедоступные категории ПДн
				case 4:
					// Ввели корректное значение категории ПДн;
					// Увеличиваем значение счетчика на 1 (check=1)
					check++;
					// Входим во второй цикл, если ввели верное значение
					// о собственных работниках, то запрос о вводе повторяется заново
					do {
						// Вызываем процедуру для чтения переменной:
						// Собственные ли работники или нет?
						employees();
						// Оператор обработки исключений
						try {
							// Функция преобразует строку, введенную пользователем, в число.
							workers = std::stoi(input);
							switch(workers) {
								// Ветка выбора 0 - обрабатываемые Пдн не собственных сотрудников
								case 0:
									// Ввели корректное значение о работниках (собственные или нет)
									// Увеличиваем значение счетчика на 1 (check=2)
									check++;
									// Входим в третий цикл, если ввели верное значение
									do {
										// Вызываем процедуру чтения переменной о количестве субъектов ПДн:
										// Количество суъектов более 100 000?
										quantity();
										// Оператор обработки исключений
										try {
											// Функция преобразует строку, введенную пользователем, в число.
											number = std::stoi(input);
											switch(number) {
												// Ветка выбора 0 - Нет (количество суъектов менее 100 000)
												case 0:
													// Ввели корректное значение о количестве субъектов
													// Увеличиваем значение счетчика на 1 (check=3)
													check++;
													// Входим в четвертый цикл, если ввели верное значение
													do {
														// Вызываем процедуру чтения переменной о типе актуальных угроз
														type_threats();
														// Оператор обработки исключений
														try {
															// Функция преобразует строку, введенную пользователем, в число.
															threats = std::stoi(input);
															switch(threats) {
																// Ветка выбора 1 - актуальны угрозы 1-го типа
																case 1:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	// Вызываем процедуру 1-го уровня защищенности ПДн
																	second();
																	break;
																	// Ветка выбора 2 - актуальны угрозы 2-го типа
																case 2:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	//Вызываем процедуру 2-го уровня защищенности ПДн
																	third();
																	break;
																	// Ветка выбора 3 - актуальны угрозы 3-го типа
																case 3:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	// Вызываем процедуру 3-го уровня защищенности ПДн
																	fourth();
																	break;
																	// Ветка выбора 9 - Помощь
																	// Выводим информацию о типах актуальных угроз
																case 9:
																	help_threads();
																	break;
																	// Если ввели неверное значение типа актуальных угроз,
																	// то выводится сообщение об ошибке, путем вызова соответствующей процедуры
																default:
																	syntax_error();
															}
															// Обработка исключений, если пользователь ввел не число.	
															// Функция перевода строки в число завершится с ошибкой.
														} catch (const std::invalid_argument) {
															std::cerr << "Ошибка ввода." << std::endl;
														}
														// Если значение счетчика < 4, то выходим из четвертого цикла,
														// Иначе повторно спрашиваем тиа актуальных угроз ПДн
													} while(check < 4);
													break;
													// Ветка выбора 1 - Да (количество суъектов более 100 000)
												case 1:
													// Ввели корректное значение о количестве субъектов
													// Увеличиваем значение счетчика на 1 (check=3)
													check++;
													do {
														type_threats();
														// Оператор обработки исключений
														try {
															// Функция преобразует строку, введенную пользователем, в число.
															threats = std::stoi(input);
															switch(threats) {
																// Ветка выбора 1 - актуальны угрозы 1-го типа
																case 1:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	// Вызываем процедуру 1-го уровня защищенности ПДн
																	second();
																	break;
																	// Ветка выбора 2 - актуальны угрозы 2-го типа
																case 2:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	second();
																	break;
																	// Ветка выбора 3 - актуальны угрозы 3-го типа
																case 3:
																	// Ввели корректное значение о типе актуальных угроз
																	// Увеличиваем значение счетчика на 1 (check=4)
																	check++;
																	// Вызываем процедуру 2-го уровня защищенности ПДн
																	fourth();
																	break;
																	// Ветка выбора 9 - Помощь
																case 9:
																	// Выводим информацию о типах актуальных угроз
																	help_threads();
																	break;
																default:
																	syntax_error();
															}
															// Обработка исключений, если пользователь ввел не число.	
															// Функция перевода строки в число завершится с ошибкой.
														} catch (const std::invalid_argument) {
															std::cerr << "Ошибка ввода." << std::endl;
														}
														// Если значение счетчика < 4, то выходим из четвертого цикла,
														// Иначе повторно спрашиваем тип актуальных угроз ПДн
													} while(check < 4);
													break;
													// Если ввели неверное значение о количестве субъектом (более или менее 100 000),
													// то выводится сообщение об ошибке, путем вызова соответствующей процедуры
												default:
													syntax_error();
											}
											// Обработка исключений, если пользователь ввел не число.	
											// Функция перевода строки в число завершится с ошибкой.
										} catch (const std::invalid_argument) {
											std::cerr << "Ошибка ввода." << std::endl;
										}
										// Если значение счетчика < 3, то выходим из третьего цикла,
										// иначе повторно спрашиваем о количестве суъектов ПДн
									} while(check < 3);
									break;
									// Ветка выбора 1 - обрабатываемые ПДн собственных сотрудников
								case 1:
									// Ввели корректное значение о работниках (собственные или нет)
									// Увеличиваем значение счетчика на 1 (check=2)
									check++;
									// Входим в третий цикл, если ввели верное значение
									do {
										// Вызываем процедуру чтения переменной о типе актуальных угроз
										type_threats();
										// Оператор обработки исключений
										try {
											// Функция преобразует строку, введенную пользователем, в число.
											threats = std::stoi(input);
											switch(threats) {
												// Ветка выбора 1 - актуальны угрозы 1-го типа
												case 1:
													// Ввели корректное значение о типе актуальных угроз
													// Увеличиваем значение счетчика на 1 (check=3)
													check++;
													// Вызываем процедуру 1-го уровня защищенности ПДн
													second();
													break;
													// Ветка выбора 2 - актуальны угрозы 2-го типа
												case 2:
													// Ввели корректное значение о типе актуальных угроз
													// Увеличиваем значение счетчика на 1 (check=3)
													check++;
													// Вызываем процедуру 2-го уровня защищенности ПДн
													third();
													break;
													// Ветка выбора 3 - актуальны угрозы 3-го типа
												case 3:
													// Ввели корректное значение о типе актуальных угроз
													// Увеличиваем значение счетчика на 1 (check=3)
													check++;
													// Вызываем процедуру 3-го уровня защищенности ПДн
													fourth();
													break;
													// Ветка выбора 9 - Помощь
													// Выводим информацию о типах актуальных угроз
												case 9:
													help_threads();
													break;
													// Если ввели неверное значение типа актуальных угроз,
													// то выводится сообщение об ошибке, путем вызова соответствующей процедуры
												default:
													syntax_error();
											}
											// Обработка исключений, если пользователь ввел не число.	
											// Функция перевода строки в число завершится с ошибкой.
										} catch (const std::invalid_argument) {
											std::cerr << "Ошибка ввода." << std::endl;
										}
										// Если значение счетчика < 3, то выходим из третьего цикла,
										// иначе повторно спрашиваем о типе актуальных угроз
									} while(check < 3);
									break;
									// Если ввели неверное значение на вопрос об обрабатываемых ПДн (собственные сотрудники или нет),
									// то выводится сообщение об ошибке, путем вызова соответствующей процедуры
								default:
									syntax_error();
							}
							// Обработка исключений, если пользователь ввел не число.	
							// Функция перевода строки в число завершится с ошибкой.
						} catch (const std::invalid_argument) {
							std::cerr << "Ошибка ввода." << std::endl;
						}
						// Если значение счетчика >=2, то выходим из второго цикла,
						// иначе повторно спрашиваем об обрабатываемых ПДн (собственные сотрудники или нет)
					} while(check < 2);
					break;
					// Ветка выбора 9 - Помощь
					// Выбодится информация о категориях ПДн, таблица соответсвия уровням защищенности ПДн
					// Информация об авторе программы
				case 9:
					cout << ("  \n");
					cout << ("Специальные категории персональных данных - информация о личности человека: расовая и национальная принадлежность, политические, религиозные и философские взгляды, состояние здоровья, подробности интимной жизни, информация о судимостях. \n");
					cout << ("  \n");
					cout << ("Биометрические персональные данные - это физиологические или биологические особенности человека, которые используют для установления его личности. К ним могут относиться фотографии, отпечатки пальцев, группа крови, генетическая информация. \n");
					cout << ("  \n");
					cout << ("Иные персональные данные - это всё, что нельзя отнести к общедоступным, специальным или биометрическим персональным данным: принадлежность к определенной социальной группе или корпоративные данные. \n");
					cout << ("  \n");
					cout << ("Общедоступные персональные данные - персональные данные, полученные только из общедоступных источников персональных данных. \n");
					cout << ("  \n");
					cout << ("Таблица соответсвия уровням защищенности ПДн согласно с выбранным параметрам. \n");
					cout << ("УЗ -  требуемый уровень защищенности ПДн. \n");
					cout << ("  \n");
					cout << ("-------------------------------------------------------------------------- \n");
					cout << ("|               |               |          |             |               | \n");
					cout << ("| Категории ПДн |  Специальные  | Биомет-  |     Иные    | Общедоступные | \n");
					cout << ("|               |               | рические |             |               | \n");
					cout << ("|               |               |          |             |               | \n");
					cout << ("-------------------------------------------------------------------------- \n");
					cout << ("|               |    |     |    |          |    |    |    |    |    |    | \n");
					cout << ("| Собственные   | Нет| Нет | Да |          | Нет| Нет| Да | Нет| Нет| Да | \n");
					cout << ("| работники     |    |     |    |          |    |    |    |    |    |    | \n");
					cout << ("|               |    |     |    |          |    |    |    |    |    |    | \n");
					cout << ("|------------------------------------------------------------------------- \n");
					cout << ("|               |    |     |    |          |    |    |    |    |    |    | \n");
					cout << ("| Количество    |>100| <100|    |          |>100|<100|    |>100|<100|    | \n");
					cout << ("| субъектов     | 000|  000|    |          | 000| 000|    | 000| 000|    | \n");
					cout << ("|               |чел.| чел.|    |          |чел.|чел.|    |чел.|чел.|    | \n");
					cout << ("|               |    |     |    |          |    |    |    |    |    |    | \n");
					cout << ("-------------------------------------------------------------------------- \n");
					cout << ("|            |  |    |     |    |          |    |    |    |    |    |    | \n");
					cout << ("|            | 1| 1УЗ| 1УЗ | 1УЗ|   1 УЗ   | 1УЗ| 2УЗ| 2УЗ| 2УЗ| 2УЗ| 2УЗ| \n");
					cout << ("|            |  |    |     |    |          |    |    |    |    |    |    | \n");
					cout << ("|            |--|--------------------------------------------------------- \n");
					cout << ("| Тип        |  |    |     |    |          |    |    |    |    |    |    | \n");
					cout << ("| актуальных | 2| 1УЗ| 2УЗ | 2УЗ|   2 УЗ   | 2УЗ| 3УЗ| 3УЗ| 2УЗ| 3УЗ| 3УЗ| \n");
					cout << ("| угроз      |  |    |     |    |          |    |    |    |    |    |    | \n");
					cout << ("|            |--|--------------------------------------------------------- \n");
					cout << ("|            |  |    |     |    |          |    |    |    |    |    |    | \n");
					cout << ("|            | 3| 2УЗ| 3УЗ | 3УЗ|   3 УЗ   | 3УЗ| 4УЗ| 4УЗ| 4УЗ| 4УЗ| 4УЗ| \n");
					cout << ("|            |  |    |     |    |          |    |    |    |    |    |    | \n");
					cout << ("-------------------------------------------------------------------------- \n");
					cout << ("Автор программы: Хроменко Дмитрий 2024 г. \n");
					cout << (" \n");
					cout << (" \n");
					break;
					// Если ввели ошибочный символ (число) при определении категории ПДн, то
					// запускаем процедуру с выводом ошибки
				default:
					syntax_error();
			}
			// Обработка исключений, если пользователь ввел не число.
			// Функция перевода строки в число завершится с ошибкой.
		} catch (const std::invalid_argument) {
			std::cerr << "Ошибка ввода." << std::endl;
		}
		// Если значение check < 2, то выходим из первого цикла и завершаем программу.
	} while(check < 2);
	return 0;
}
